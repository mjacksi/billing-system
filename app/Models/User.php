<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Support\Facades\Request;
use Laravel\Passport\HasApiTokens;
use Spatie\Translatable\HasTranslations;


class User extends Authenticatable
{
    use Notifiable, SoftDeletes, HasApiTokens;

    public const DIR_IMAGE_UPLOADS = 'users';

    protected $guarded = [];

    protected static function boot()
    {
        parent::boot(); //  Change the autogenerated stub
        static::addGlobalScope('orderedBy', function (Builder $builder) {
            $builder->orderBy('ordered');
        });

        if (request()->is('api/*')) {
            static::addGlobalScope('notDraft', function (Builder $builder) {
                $builder->notDraft();
            });
//        static::addGlobalScope('active', function (Builder $builder) {
//            $builder->active();
//        });
        }

    }


    //User type
    public const CLIENT = 1;//default
    public const DRIVER = 2;
    public const NOT_DETECTED = 3;


//    User status type
    public const ACTIVE = 1;
    public const NOT_ACTIVE = 2;
    public const NEW_ACCOUNT = 3;//قبل القبول والرفض


//    User verified phone number
    public const VERIFIED = 0;
    public const NOT_VERIFIED = 1;

    //    User Register type
    public const ANDROID = 1;
    public const WEB = 2;
    public const DASHBOARD = 3;


    //    Driver Type type
    public const FOLLOWED_TO_RESTAURANT_DRIVER = 1;
    public const FREELANCER_DRIVER = 2;


    protected $hidden = ['password', 'remember_token',];


    //    relations
    public function deliveries()
    {
        return $this->hasMany(Delivery::class, 'driver_id', 'id');
    }

    public function packages()
    {
        return $this->belongsToMany(Package::class, UserPackage::class, 'user_id', 'package_id')->withPivot(
            [
                'package_id',
                'user_id',
                'expire_date',
                'expired',
            ])
            ->using(UserPackages::class)
//            ->as('category_regions')//renaming the pivot table
            ->withTimestamps();
    }

    public function city()
    {
        return $this->belongsTo(City::class, 'city_id', 'id');
    }

    public function favorites()
    {
        return $this->hasMany(Favorite::class);
    }

    public function providerRatings()
    {
        return $this->hasMany(Ratting::class, 'merchant_id', 'id');
    }

    public function addresses()
    {
//        هاي كل العناوين
        return $this->hasMany(Address::class, 'user_id', 'id');
    }

    public function orders()
    {
        return $this->hasMany(Order::class);
    }

    public function wallets()
    {
        return $this->hasMany(Wallet::class);
    }


//    Scopes

    public function scopePhone($query, $param)
    {
        return $query->where('phone', $param);
    }

    public function scopeActive($query)
    {
        return $query->where('status', self::ACTIVE);
    }

    public function scopeNotDraft($query)
    {
        return $query->where('users.draft', false);
    }

    public function scopeClient($query)
    {
        return $query->where('type', self::CLIENT);
    }

    public function scopeDriver($query)
    {
        return $query->where('type', self::DRIVER);
    }


//    attributes
    public function getStatusNameAttribute()
    {
        switch ($this->status) {
            case self::ACTIVE:
                return api('active');
            case self::NOT_ACTIVE:
                return api('not active');
            case self::NEW_ACCOUNT:
                return api('New Account');
            default:
                return api('unknown status');
                break;
        }
    }

    public function getAccountTypeNameAttribute()
    {
        switch ($this->type) {
            case self::CLIENT:
                return api('client');
            case self::DRIVER:
                return api('driver');
            case self::NOT_DETECTED:
                return api('not detected');
            default:
                return api('unknown status');
                break;
        }
    }

    public function getImageAttribute($value)
    {
        return is_null($value) ? null : asset($value);
    }

    public function getActiveNameAttribute()
    {
        return $this->status ? t('Active') : t('Inactive');
    }

    public function getSourceNameAttribute()
    {
        switch ($this->source) {
            case self::ANDROID:
                return api('Android');
            case self::WEB:
                return api('Web');
            case self::DASHBOARD:
                return api('Dashboard');
            default:
                return api('unknown status');
                break;
        }

    }

    public function getUserWalletAttribute()
    {
        $user_balance = Wallet::query()->where('user_id', $this->id)->where('t_type', '1')->sum('amount');
        $user_w_cancel = Wallet::query()->where('user_id', $this->id)->where('t_type', '2')->sum('amount');
        $user_w_orders = Wallet::query()->where('user_id', $this->id)->where('t_type', '3')->sum('amount');

        return ($user_balance + $user_w_cancel) - $user_w_orders;
    }

    public function getUnreadNotificationsAttribute()
    {
        return $this->unreadNotifications()->count();
    }

    public function getActionButtonsAttribute()
    {
        $route = 'users';

        $button = '';
        $button .= '<a href="' . route('manager.'.$route.'.edit', $this->id) . '" class="btn btn-icon btn-danger "><i class="la la-pencil"></i></a> ';
//        $button .= '<a href="' . route('manager.'.$route.'.show', $this->id) . '" class="btn btn-icon btn-danger "><i class="la la-eye"></i></a> ';
        $button .= '<button type="button" data-id="' . $this->id . '" data-toggle="modal" data-target="#deleteModel" class="deleteRecord btn btn-icon btn-danger"><i class="la la-trash"></i></button>';

        return $button;
    }


//methods
    public
    function setLanguage()
    {
        $locale = $this->local ?? config("app.fallback_locale");
        app()->setLocale($locale);
    }


    protected
        $casts = [
        'email_verified_at' => 'datetime',
        'updated_at' => 'datetime',
    ];


}
